---
title: "supplementary_fig02"
author: "Daniel FÃ¼rth"
format: gfm
---

## Create a table of raw data files

The raw data text files are in the folder `./data/lc/`.
Lets list the content of that folder:
```{r}
folder <- './data/lc'
files <- dir(folder)
files
```
We have two types of files: `MS` and `chromatogram`. Lets check the presence of string `MS` and `chromatogram` in the filenames using `grepl()` command and make a boolean index based on it:
```{r}
ms <- grepl("MS", files)
chromatogram <- grepl("chromatogram", files)
```
Lets make a data frame object, `myfiles`, that stores all info about our files including the full file path:
```{r}
myfiles<-data.frame(folder, files, ms, chromatogram)
#show the data frame in console
myfiles

#get the names of the the variables
names(myfiles)
```
add full file paths:
```{r}
myfiles$path<-dir(folder, full.names=TRUE)
#get the names of the the variables
names(myfiles)
```

## Import the data

Next lets import a chromatogram file. We can open the file manually and find that on line 76 we have the text `Raw data:` followed by the data in TSV format. 
```
76    Raw Data:
77    Time(min)	Step(sec)	Value(mAU)
78    0.000000	0.00	0.000000	
79    0.001667	0.10	0.000030	
80    0.003333	0.10	0.000580	
81    0.005000	0.10	0.002410	
```
We can simply then import the data into a data frame by adding `skip = 76` and the `read.table()`command will skip all the line suntil line 77. If we also add `header=TRUE` we will import the variable names into the header of the data frame.

```{r}
data<-read.table(myfiles$path[1], skip=76, header=TRUE)
head(data) #just show the first 6 lines of the table, tail() command shows the last 6 lines.
```

Lets plot the chromatogram as a line plot:
```{r}
plot(data$Time.min., data$Value.mAU., type='l')
```

# Make a master data frame with all data.

Lets examine the different files we have from the chromatogram:
```{r}
myfiles[myfiles$chromatogram,]
```
We can see that the sample name preceeds the first `_` in the file name so lets add a variable `sample` with that text string:
```{r}
#split the string by _ character
underscore_split<-strsplit( myfiles$files, "_")
underscore_split
```
Here `underscore_split` is a list object where each file name is an entry in the list and it then has a nested list within where text between each "_" is entered as a single entry. We can then extract the first entry from each list using `lapply()`"list apply" function:
```{r}
# Create a new list 'sample.name' by applying a function to each element of 'underscore_split'
sample.name <- lapply(underscore_split, function(x) {
  return(x[1])  # Return the first element (index 1) of each element in 'underscore_split'
})

# Display the resulting 'sample.name' list
sample.name

# Check class of the object
class(sample.name)
```
Here `sample.name`is a object with the class list. If we now want to go from list object to a character vector to insert it into our data frame we can do like this:
```{r}
myfiles$sample<-unlist(sample.name)
myfiles
``` 
You can see how we now have a variable `myfiles$sample` with all the sample names:
```{r}
myfiles$sample
```
Some stats, showing that each sample has two files (one `MS` and one `chromatogram`):
```{r}
table(myfiles$sample)
``` 

Lets create a new data frame called `trace` where we have all the traces from each experiment into one file:
```{r}
#create an empty data frame where we will store our data
trace<-data.frame(sample = character(), time = numeric(), value = numeric())

#loop through each chromatogram file and load it in and add it to trace data frame
for(i in which(myfiles$chromatogram)){
  tmp<-read.table(myfiles$path[i], skip=76, header=TRUE)
  
  trace.tmp<-data.frame(
                        sample = myfiles$sample[i], 
                        time = tmp$Time.min, 
                        value = tmp$Value.mAU
                        )
  
  #add the just loaded file into master data frame, trace
  trace <- rbind(trace, trace.tmp)
}

```

Lets check the new data frame `trace`:

```{r}
table(trace$sample)
```
So we have each sample loaded with 1801 measurements in each.

# Make a plot

```{r}
mysamples<- rev(unique(trace$sample)) #reverse order because we want reactions RXN at bottom so one reads the graph top to bottom.

scale.factor.y <- 1.2 #adds some space between lines when we stack them on top. 
text.under.y <- 0.2 #placement of the text label under the trace. 
text.under.x <- 0.1 #placement of the text label under the trace. 


plot(trace$time[trace$sample == mysamples[1]], 
     trace$value[trace$sample == mysamples[1]], 
     type='l',
     xlab='Time',
     ylab='',
     ylim=c(-max(trace$value)*text.under.y, scale.factor.y*max(trace$value)*length(mysamples))
     )

for(i in seq_along(mysamples)){
  #k is a variable that adds some space for sample 3 and above so the two reactions are vertically seperated from the rest.
  if(i > 2){
    k <- 280
  }else{
    k <- 0
  }
  lines(trace$time[trace$sample == mysamples[i]], 
     trace$value[trace$sample == mysamples[i]]+scale.factor.y*max(trace$value)*(i-1)+k, col=i )
  
  text(max(trace$time)*text.under.x, scale.factor.y*max(trace$value)*(i-1)-max(trace$value)*text.under.y+k, mysamples[i], col=i)
}
```

Lets make this graph a little bit prettier, using [ColorBrewer2.org](https://colorbrewer2.org/) for color panels:

```{r}
if(!require(RColorBrewer)){
  install.packages('RColorBrewer')
}
library(RColorBrewer)

mylabels <- c('AZdye594-PEG1-N-bis(PEG2-Tz)', 
              'AZdye488-PEG1-N-bis(PEG2-Tz)',
              'AZdye594-DBCO',
              'AZdye488-DBCO',
              'Azido-PEG1-N-bis(PEG2-Tz)')

color <- c(RColorBrewer::brewer.pal(6, 'PuOr')[c(5,1,6,2)], 'black')

scale.factor.y <- 1.2 #adds some space between lines when we stack them on top. 
text.under.y <- 0.3 #placement of the text label under the trace. 
text.under.x <- 0.31 #placement of the text label under the trace. 

#normalize values 
normalize <- function(num_vec){
  maxnv <- max(num_vec, na.rm = TRUE)
  md<-num_vec[1]
  return((num_vec-md) / (maxnv))
}

#create a new variable 'norm' which normalizes values for each compound
trace$norm<-with(trace, ave(value, sample, FUN = normalize))

quartz(width=5.5, height=5.6)
par(mar=c(2,1,0,1))
plot(trace$time[trace$sample == mysamples[1]], 
     trace$norm[trace$sample == mysamples[1]], 
     type='l',
     xlab='',
     ylab='',
     ylim=c(-max(trace$norm)*text.under.y, scale.factor.y^2*max(trace$norm)*length(mysamples)),
     xlim = c(1, 2.5),
     axes=FALSE,
     col=color[1]
     )

for(i in seq_along(mysamples)){
  #k is a variable that adds some space for sample 3 and above so the two reactions are vertically seperated from the rest.
  if(i > 2){
    k <- 1.5
  }else{
    k <- 0
  }
  lines(trace$time[trace$sample == mysamples[i]], 
     trace$norm[trace$sample == mysamples[i]]+scale.factor.y*max(trace$norm)*(i-1)+k, col=color[i])
  
  text(max(trace$time)*text.under.x, scale.factor.y*max(trace$norm)*(i-1)-max(trace$norm)*text.under.y+k, mylabels[i], col=color[i], pos=4, cex = 0.8)
}
```

Lets save the figure as a PDF:

```{r}
quartz.save(file='./pdf/S02b.pdf', type='pdf')
```

You can view the PDF here: 
[https://github.com/furthlab/FluorPLA/blob/main/pdf/S02b.pdf](https://github.com/furthlab/FluorPLA/blob/main/pdf/S02b.pdf)
