{
  "hash": "ee3e66bb65c1abd229894992e738c549",
  "result": {
    "markdown": "---\ntitle: \"supplementary_fig02\"\nauthor: \"Daniel FÃ¼rth\"\nformat: html\n---\n\n\n## Create a table of raw data files\n\nThe raw data text files are in the folder `./data/lc/`.\nLets list the content of that folder:\n\n::: {.cell}\n\n```{.r .cell-code}\nfolder <- './data/lc'\nfiles <- dir(folder)\nfiles\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"Azido_PEG_tetrazine_chromatogram_280nm.txt\"\n [2] \"Azido_PEG_tetrazine_MS.txt\"                \n [3] \"DBCO488_chromatogram_280nm.txt\"            \n [4] \"DBCO488_MS.txt\"                            \n [5] \"DBCO594_chromatogram_280nm.txt\"            \n [6] \"DBCO594_MS.txt\"                            \n [7] \"RXN488_chromatogram_280nm.txt\"             \n [8] \"RXN488_MS.txt\"                             \n [9] \"RXN594_chromatogram_280nm.txt\"             \n[10] \"RXN594_MS.txt\"                             \n```\n:::\n:::\n\nWe have two types of files: `MS` and `chromatogram`. Lets check the presence of string `MS` and `chromatogram` in the filenames using `grepl()` command and make a boolean index based on it:\n\n::: {.cell}\n\n```{.r .cell-code}\nms <- grepl(\"MS\", files)\nchromatogram <- grepl(\"chromatogram\", files)\n```\n:::\n\nLets make a data frame object, `myfiles`, that stores all info about our files including the full file path:\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfiles<-data.frame(folder, files, ms, chromatogram)\n#show the data frame in console\nmyfiles\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      folder                                      files    ms chromatogram\n1  ./data/lc Azido_PEG_tetrazine_chromatogram_280nm.txt FALSE         TRUE\n2  ./data/lc                 Azido_PEG_tetrazine_MS.txt  TRUE        FALSE\n3  ./data/lc             DBCO488_chromatogram_280nm.txt FALSE         TRUE\n4  ./data/lc                             DBCO488_MS.txt  TRUE        FALSE\n5  ./data/lc             DBCO594_chromatogram_280nm.txt FALSE         TRUE\n6  ./data/lc                             DBCO594_MS.txt  TRUE        FALSE\n7  ./data/lc              RXN488_chromatogram_280nm.txt FALSE         TRUE\n8  ./data/lc                              RXN488_MS.txt  TRUE        FALSE\n9  ./data/lc              RXN594_chromatogram_280nm.txt FALSE         TRUE\n10 ./data/lc                              RXN594_MS.txt  TRUE        FALSE\n```\n:::\n\n```{.r .cell-code}\n#get the names of the the variables\nnames(myfiles)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"folder\"       \"files\"        \"ms\"           \"chromatogram\"\n```\n:::\n:::\n\nadd full file paths:\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfiles$path<-dir(folder, full.names=TRUE)\n#get the names of the the variables\nnames(myfiles)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"folder\"       \"files\"        \"ms\"           \"chromatogram\" \"path\"        \n```\n:::\n:::\n\n\n## Running Code\n\nWhen you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n\nYou can add options to executable code like this \n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n:::\n\n\nThe `echo: false` option disables the printing of code (only output is displayed).\n",
    "supporting": [
      "supplementary_fig02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}