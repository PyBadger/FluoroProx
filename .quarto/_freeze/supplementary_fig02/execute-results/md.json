{
  "hash": "67ba4c6ac75153b056d0ad46d4a42be7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"supplementary_fig02\"\nauthor: \"Daniel FÃ¼rth <br><br>Table of Contents:\"\nformat: gfm\ntoc: true\n---\n\n\n## Create a table of raw data files\n\nThe raw data text files are in the folder `./data/lc/`.\nLets list the content of that folder:\n\n::: {.cell}\n\n```{.r .cell-code}\nfolder <- './data/lc'\nfiles <- dir(folder)\nfiles\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Azido_PEG_tetrazine_chromatogram_280nm.txt\"\n [2] \"Azido_PEG_tetrazine_MS.txt\"                \n [3] \"DBCO488_chromatogram_280nm.txt\"            \n [4] \"DBCO488_MS.txt\"                            \n [5] \"DBCO594_chromatogram_280nm.txt\"            \n [6] \"DBCO594_MS.txt\"                            \n [7] \"RXN488_chromatogram_280nm.txt\"             \n [8] \"RXN488_MS.txt\"                             \n [9] \"RXN594_chromatogram_280nm.txt\"             \n[10] \"RXN594_MS.txt\"                             \n```\n\n\n:::\n:::\n\nWe have two types of files: `MS` and `chromatogram`. Lets check the presence of string `MS` and `chromatogram` in the filenames using `grepl()` command and make a boolean index based on it:\n\n::: {.cell}\n\n```{.r .cell-code}\nms <- grepl(\"MS\", files)\nchromatogram <- grepl(\"chromatogram\", files)\n```\n:::\n\nLets make a data frame object, `myfiles`, that stores all info about our files including the full file path:\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfiles<-data.frame(folder, files, ms, chromatogram)\n#show the data frame in console\nmyfiles\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      folder                                      files    ms chromatogram\n1  ./data/lc Azido_PEG_tetrazine_chromatogram_280nm.txt FALSE         TRUE\n2  ./data/lc                 Azido_PEG_tetrazine_MS.txt  TRUE        FALSE\n3  ./data/lc             DBCO488_chromatogram_280nm.txt FALSE         TRUE\n4  ./data/lc                             DBCO488_MS.txt  TRUE        FALSE\n5  ./data/lc             DBCO594_chromatogram_280nm.txt FALSE         TRUE\n6  ./data/lc                             DBCO594_MS.txt  TRUE        FALSE\n7  ./data/lc              RXN488_chromatogram_280nm.txt FALSE         TRUE\n8  ./data/lc                              RXN488_MS.txt  TRUE        FALSE\n9  ./data/lc              RXN594_chromatogram_280nm.txt FALSE         TRUE\n10 ./data/lc                              RXN594_MS.txt  TRUE        FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n#get the names of the the variables\nnames(myfiles)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"folder\"       \"files\"        \"ms\"           \"chromatogram\"\n```\n\n\n:::\n:::\n\nadd full file paths:\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfiles$path<-dir(folder, full.names=TRUE)\n#get the names of the the variables\nnames(myfiles)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"folder\"       \"files\"        \"ms\"           \"chromatogram\" \"path\"        \n```\n\n\n:::\n:::\n\n\n## Import the data\n\nNext lets import a chromatogram file. We can open the file manually and find that on line 76 we have the text `Raw data:` followed by the data in TSV format. \n```\n76    Raw Data:\n77    Time(min)\tStep(sec)\tValue(mAU)\n78    0.000000\t0.00\t0.000000\t\n79    0.001667\t0.10\t0.000030\t\n80    0.003333\t0.10\t0.000580\t\n81    0.005000\t0.10\t0.002410\t\n```\nWe can simply then import the data into a data frame by adding `skip = 76` and the `read.table()`command will skip all the line suntil line 77. If we also add `header=TRUE` we will import the variable names into the header of the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata<-read.table(myfiles$path[1], skip=76, header=TRUE)\nhead(data) #just show the first 6 lines of the table, tail() command shows the last 6 lines.\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Time.min. Step.sec. Value.mAU.\n1  0.000000       0.0    0.00000\n2  0.001667       0.1    0.00003\n3  0.003333       0.1    0.00058\n4  0.005000       0.1    0.00241\n5  0.006667       0.1    0.00534\n6  0.008333       0.1    0.00690\n```\n\n\n:::\n:::\n\n\nLets plot the chromatogram as a line plot:\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(data$Time.min., data$Value.mAU., type='l')\n```\n\n::: {.cell-output-display}\n![](supplementary_fig02_files/figure-commonmark/unnamed-chunk-6-1.png)\n:::\n:::\n\n\n# Make a master data frame with all data.\n\nLets examine the different files we have from the chromatogram:\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfiles[myfiles$chromatogram,]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     folder                                      files    ms chromatogram\n1 ./data/lc Azido_PEG_tetrazine_chromatogram_280nm.txt FALSE         TRUE\n3 ./data/lc             DBCO488_chromatogram_280nm.txt FALSE         TRUE\n5 ./data/lc             DBCO594_chromatogram_280nm.txt FALSE         TRUE\n7 ./data/lc              RXN488_chromatogram_280nm.txt FALSE         TRUE\n9 ./data/lc              RXN594_chromatogram_280nm.txt FALSE         TRUE\n                                                  path\n1 ./data/lc/Azido_PEG_tetrazine_chromatogram_280nm.txt\n3             ./data/lc/DBCO488_chromatogram_280nm.txt\n5             ./data/lc/DBCO594_chromatogram_280nm.txt\n7              ./data/lc/RXN488_chromatogram_280nm.txt\n9              ./data/lc/RXN594_chromatogram_280nm.txt\n```\n\n\n:::\n:::\n\nWe can see that the sample name preceeds the first `_` in the file name so lets add a variable `sample` with that text string:\n\n::: {.cell}\n\n```{.r .cell-code}\n#split the string by _ character\nunderscore_split<-strsplit( myfiles$files, \"_\")\nunderscore_split\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"Azido\"        \"PEG\"          \"tetrazine\"    \"chromatogram\" \"280nm.txt\"   \n\n[[2]]\n[1] \"Azido\"     \"PEG\"       \"tetrazine\" \"MS.txt\"   \n\n[[3]]\n[1] \"DBCO488\"      \"chromatogram\" \"280nm.txt\"   \n\n[[4]]\n[1] \"DBCO488\" \"MS.txt\" \n\n[[5]]\n[1] \"DBCO594\"      \"chromatogram\" \"280nm.txt\"   \n\n[[6]]\n[1] \"DBCO594\" \"MS.txt\" \n\n[[7]]\n[1] \"RXN488\"       \"chromatogram\" \"280nm.txt\"   \n\n[[8]]\n[1] \"RXN488\" \"MS.txt\"\n\n[[9]]\n[1] \"RXN594\"       \"chromatogram\" \"280nm.txt\"   \n\n[[10]]\n[1] \"RXN594\" \"MS.txt\"\n```\n\n\n:::\n:::\n\nHere `underscore_split` is a list object where each file name is an entry in the list and it then has a nested list within where text between each \"_\" is entered as a single entry. We can then extract the first entry from each list using `lapply()`\"list apply\" function:\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a new list 'sample.name' by applying a function to each element of 'underscore_split'\nsample.name <- lapply(underscore_split, function(x) {\n  return(x[1])  # Return the first element (index 1) of each element in 'underscore_split'\n})\n\n# Display the resulting 'sample.name' list\nsample.name\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"Azido\"\n\n[[2]]\n[1] \"Azido\"\n\n[[3]]\n[1] \"DBCO488\"\n\n[[4]]\n[1] \"DBCO488\"\n\n[[5]]\n[1] \"DBCO594\"\n\n[[6]]\n[1] \"DBCO594\"\n\n[[7]]\n[1] \"RXN488\"\n\n[[8]]\n[1] \"RXN488\"\n\n[[9]]\n[1] \"RXN594\"\n\n[[10]]\n[1] \"RXN594\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check class of the object\nclass(sample.name)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\nHere `sample.name`is a object with the class list. If we now want to go from list object to a character vector to insert it into our data frame we can do like this:\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfiles$sample<-unlist(sample.name)\nmyfiles\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      folder                                      files    ms chromatogram\n1  ./data/lc Azido_PEG_tetrazine_chromatogram_280nm.txt FALSE         TRUE\n2  ./data/lc                 Azido_PEG_tetrazine_MS.txt  TRUE        FALSE\n3  ./data/lc             DBCO488_chromatogram_280nm.txt FALSE         TRUE\n4  ./data/lc                             DBCO488_MS.txt  TRUE        FALSE\n5  ./data/lc             DBCO594_chromatogram_280nm.txt FALSE         TRUE\n6  ./data/lc                             DBCO594_MS.txt  TRUE        FALSE\n7  ./data/lc              RXN488_chromatogram_280nm.txt FALSE         TRUE\n8  ./data/lc                              RXN488_MS.txt  TRUE        FALSE\n9  ./data/lc              RXN594_chromatogram_280nm.txt FALSE         TRUE\n10 ./data/lc                              RXN594_MS.txt  TRUE        FALSE\n                                                   path  sample\n1  ./data/lc/Azido_PEG_tetrazine_chromatogram_280nm.txt   Azido\n2                  ./data/lc/Azido_PEG_tetrazine_MS.txt   Azido\n3              ./data/lc/DBCO488_chromatogram_280nm.txt DBCO488\n4                              ./data/lc/DBCO488_MS.txt DBCO488\n5              ./data/lc/DBCO594_chromatogram_280nm.txt DBCO594\n6                              ./data/lc/DBCO594_MS.txt DBCO594\n7               ./data/lc/RXN488_chromatogram_280nm.txt  RXN488\n8                               ./data/lc/RXN488_MS.txt  RXN488\n9               ./data/lc/RXN594_chromatogram_280nm.txt  RXN594\n10                              ./data/lc/RXN594_MS.txt  RXN594\n```\n\n\n:::\n:::\n\nYou can see how we now have a variable `myfiles$sample` with all the sample names:\n\n::: {.cell}\n\n```{.r .cell-code}\nmyfiles$sample\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Azido\"   \"Azido\"   \"DBCO488\" \"DBCO488\" \"DBCO594\" \"DBCO594\" \"RXN488\" \n [8] \"RXN488\"  \"RXN594\"  \"RXN594\" \n```\n\n\n:::\n:::\n\nSome stats, showing that each sample has two files (one `MS` and one `chromatogram`):\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(myfiles$sample)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  Azido DBCO488 DBCO594  RXN488  RXN594 \n      2       2       2       2       2 \n```\n\n\n:::\n:::\n\n\nLets create a new data frame called `trace` where we have all the traces from each experiment into one file:\n\n::: {.cell}\n\n```{.r .cell-code}\n#create an empty data frame where we will store our data\ntrace<-data.frame(sample = character(), time = numeric(), value = numeric())\n\n#loop through each chromatogram file and load it in and add it to trace data frame\nfor(i in which(myfiles$chromatogram)){\n  tmp<-read.table(myfiles$path[i], skip=76, header=TRUE)\n  \n  trace.tmp<-data.frame(\n                        sample = myfiles$sample[i], \n                        time = tmp$Time.min, \n                        value = tmp$Value.mAU\n                        )\n  \n  #add the just loaded file into master data frame, trace\n  trace <- rbind(trace, trace.tmp)\n}\n```\n:::\n\n\nLets check the new data frame `trace`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(trace$sample)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  Azido DBCO488 DBCO594  RXN488  RXN594 \n   1801    1801    1801    1801    1801 \n```\n\n\n:::\n:::\n\nSo we have each sample loaded with 1801 measurements in each.\n\n# Make a plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmysamples<- rev(unique(trace$sample)) #reverse order because we want reactions RXN at bottom so one reads the graph top to bottom.\n\nscale.factor.y <- 1.2 #adds some space between lines when we stack them on top. \ntext.under.y <- 0.2 #placement of the text label under the trace. \ntext.under.x <- 0.1 #placement of the text label under the trace. \n\n\nplot(trace$time[trace$sample == mysamples[1]], \n     trace$value[trace$sample == mysamples[1]], \n     type='l',\n     xlab='Time',\n     ylab='',\n     ylim=c(-max(trace$value)*text.under.y, scale.factor.y*max(trace$value)*length(mysamples))\n     )\n\nfor(i in seq_along(mysamples)){\n  #k is a variable that adds some space for sample 3 and above so the two reactions are vertically seperated from the rest.\n  if(i > 2){\n    k <- 280\n  }else{\n    k <- 0\n  }\n  lines(trace$time[trace$sample == mysamples[i]], \n     trace$value[trace$sample == mysamples[i]]+scale.factor.y*max(trace$value)*(i-1)+k, col=i )\n  \n  text(max(trace$time)*text.under.x, scale.factor.y*max(trace$value)*(i-1)-max(trace$value)*text.under.y+k, mysamples[i], col=i)\n}\n```\n\n::: {.cell-output-display}\n![](supplementary_fig02_files/figure-commonmark/unnamed-chunk-15-1.png)\n:::\n:::\n\n\nLets make this graph a little bit prettier, using [ColorBrewer2.org](https://colorbrewer2.org/) for color panels:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif(!require(RColorBrewer)){\n  install.packages('RColorBrewer')\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: RColorBrewer\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(RColorBrewer)\n\nmylabels <- c('AZdye594-PEG1-N-bis(PEG2-Tz)', \n              'AZdye488-PEG1-N-bis(PEG2-Tz)',\n              'AZdye594-DBCO',\n              'AZdye488-DBCO',\n              'Azido-PEG1-N-bis(PEG2-Tz)')\n\ncolor <- c(RColorBrewer::brewer.pal(6, 'PuOr')[c(5,1,6,2)], 'black')\n\nscale.factor.y <- 1.2 #adds some space between lines when we stack them on top. \ntext.under.y <- 0.3 #placement of the text label under the trace. \ntext.under.x <- 0.31 #placement of the text label under the trace. \n\n#normalize values \nnormalize <- function(num_vec){\n  maxnv <- max(num_vec, na.rm = TRUE)\n  md<-num_vec[1]\n  return((num_vec-md) / (maxnv))\n}\n\n#create a new variable 'norm' which normalizes values for each compound\ntrace$norm<-with(trace, ave(value, sample, FUN = normalize))\n\nquartz(width=5.5, height=5.6)\npar(mar=c(2,1,0,1))\nplot(trace$time[trace$sample == mysamples[1]], \n     trace$norm[trace$sample == mysamples[1]], \n     type='l',\n     xlab='',\n     ylab='',\n     ylim=c(-max(trace$norm)*text.under.y, scale.factor.y^2*max(trace$norm)*length(mysamples)),\n     xlim = c(1, 2.5),\n     axes=FALSE,\n     col=color[1]\n     )\n\nfor(i in seq_along(mysamples)){\n  #k is a variable that adds some space for sample 3 and above so the two reactions are vertically seperated from the rest.\n  if(i > 2){\n    k <- 1.5\n  }else{\n    k <- 0\n  }\n  lines(trace$time[trace$sample == mysamples[i]], \n     trace$norm[trace$sample == mysamples[i]]+scale.factor.y*max(trace$norm)*(i-1)+k, col=color[i])\n  \n  text(max(trace$time)*text.under.x, scale.factor.y*max(trace$norm)*(i-1)-max(trace$norm)*text.under.y+k, mylabels[i], col=color[i], pos=4, cex = 0.8)\n}\n```\n\n::: {.cell-output-display}\n![](supplementary_fig02_files/figure-commonmark/unnamed-chunk-16-1.png)\n:::\n:::\n\n\nLets save the figure as a PDF:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquartz.save(file='./pdf/S02b.pdf', type='pdf')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nquartz_off_screen \n                2 \n```\n\n\n:::\n:::\n\n\nYou can view the PDF here: \n[https://github.com/furthlab/FluorPLA/blob/main/pdf/S02b.pdf](https://github.com/furthlab/FluorPLA/blob/main/pdf/S02b.pdf)\n\n# Same for MS data\n\nRow 44 here has the `Raw data:` tag. Unfortuantely the header contains some illegal characters for R to import it straightforward with the `read.table()` command. We will get the error:\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp<-read.table(\"./data/lc/Azido_PEG_tetrazine_MS.txt\", skip=44, header=TRUE)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in scan(file = file, what = what, sep = sep, quote = quote, dec = dec, : line 1 did not have 7 elements\n```\n\n\n:::\n:::\n\n\nSo instead we will skip the header column name line and import directly from line 45 and add the variable names manually:\n\n::: {.cell}\n\n```{.r .cell-code}\n#create an empty data frame where we will store our data\nmsdata<-data.frame(mass.mz = character(), intensity = integer(), intensity.perc = numeric())\n\n#loop through each MS file and load it in and add it to msdata data frame\nfor(i in which(myfiles$ms)){\n  tmp<-read.table(myfiles$path[i], skip=45, header=FALSE)\n  \n  msdata.tmp<-data.frame(\n                        sample = myfiles$sample[i], \n                        mass.mz = tmp[,1], \n                        intensity = tmp[,2],\n                        intensity.perc = tmp[,3]\n                        )\n  \n  #add the just loaded file into master data frame, msdata\n  msdata <- rbind(msdata, msdata.tmp)\n}\n```\n:::\n\n\nLets make a mass spec plot function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#' Create a Mass Spectrometry Plot\n#'\n#' Generates a mass spectrometry plot to visualize mass-to-charge ratio (m/z) and intensity percentage.\n#'\n#' @param x A data frame containing two columns: 'mass.mz' for mass-to-charge ratio and 'intensity.perc' for intensity percentage.\n#' @param xlim A numeric vector of length 2, specifying the x-axis limits for the plot.\n#' @param main Title of the plot.\n#' @param col The color for the lines in the plot.\n#' \n#' @details This function plots mass spectrometry data, where 'mass.mz' represents the mass-to-charge ratio (m/z)\n#'          and 'intensity.perc' represents the intensity percentage.\n#'\n#' @examples\n#' # Sample data frame 'ms_data'\n#' ms_data <- data.frame(mass.mz = c(600, 700, 800, 900),\n#'                       intensity.perc = c(10, 30, 60, 40))\n#'\n#' # Create a mass spectrometry plot\n#' ms.plot(ms_data, xlim = c(500, 1000), col = 'blue')\n#'\n#' @seealso \\code{\\link{plot}}, \\code{\\link{axis}}, \\code{\\link{lines}}\n#'\n#' @return NULL (a plot is displayed)\n#'\n#' @author Daniel FÃ¼rth\n#'\n#' @export\nms.plot <- function(x, xlim=c(500, 2000), main = '', col='black'){\n  par(yaxs='i', xaxs='i')\n  plot(x$mass.mz, x$intensity.perc, type='n', xlim=xlim, xlab='m/z', ylab='%', axes=F)\n  title(main = main, col.main = col)\n\n  axis(1, at=seq(xlim[1], xlim[2], length.out=7))\n  axis(2, at=c(0,25,50,75,100), las=1)\n  \n  lin<-lapply(seq_along(x$mass.mz), function(l){lines(rep(x$mass.mz[l],2), c(x$intensity.perc[l], 0), col=col )})\n}\n```\n:::\n\n\nLets try it:\n\n::: {.cell}\n\n```{.r .cell-code}\nms.plot(msdata[msdata$sample=='Azido',])\n```\n\n::: {.cell-output-display}\n![](supplementary_fig02_files/figure-commonmark/unnamed-chunk-21-1.png)\n:::\n:::\n\nNice. Now we also need to add peak-detection to it. We will use the package [MassSpecWavelet](https://rdrr.io/bioc/MassSpecWavelet/man/MassSpecWavelet.package.html).\n\n## Peak-detection and annotation in MS\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#check if devtools is installed. It is used to\nif(!require(devtools)){\n  install.packages('devtools')\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: devtools\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: usethis\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(devtools)\n\n#check if MassSpecWavelet is installed, it is used to call peaks in MS data.\nif(!require(MassSpecWavelet)){\n  devtools::install_github('https://github.com/zeehio/MassSpecWavelet')\n}\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLoading required package: MassSpecWavelet\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(MassSpecWavelet)\n\npeakInfo <- peakDetectionCWT(msdata[msdata$sample=='Azido',]$intensity, SNR.Th=3)\nmajorPeakInfo <- peakInfo$majorPeakInfo\npeakIndex <- majorPeakInfo$peakIndex\n\n\nms.plot(msdata[msdata$sample=='Azido',])\n\nxpos <-msdata[msdata$sample=='Azido',]$mass.mz[peakIndex]\nypos <- msdata[msdata$sample=='Azido',]$intensity.perc[peakIndex]\n\npoints(xpos, ypos, col='red', pch=21, xpd=TRUE)\n\n#pos=3 will print the label above the point, 1 = under, 2 = left, 4 = right.\ntext(xpos, ypos, round(xpos,2), pos=3, xpd=TRUE)\n```\n\n::: {.cell-output-display}\n![](supplementary_fig02_files/figure-commonmark/unnamed-chunk-22-1.png)\n:::\n:::\n\n\nS lets add this to out function:\n\n\n::: {.cell}\n\n:::\n\n\n\nThen lets plot all the samples on one row each:\n\n::: {.cell}\n\n```{.r .cell-code}\nmsSamples <- unique(msdata$sample)\npar(mfrow=c(ceiling(length(msSamples)/2), 2))\nfor(i in seq_along(msSamples) ){\n  ms.plot(msdata[msdata$sample==msSamples[i],], main=msSamples[i], col=i)\n}\n```\n\n::: {.cell-output-display}\n![](supplementary_fig02_files/figure-commonmark/unnamed-chunk-24-1.png)\n:::\n:::\n\n\nPlot a figure:\n\n::: {.cell}\n\n```{.r .cell-code}\nquartz(width=6.8, height=5.4)\n# Set up a 2x1 layout for subplots\npar(mfrow = c(2, 1), mar = c(3, 4, 1, 1))\n\n# Plot the first sample data\nms.plot(msdata[msdata$sample == 'RXN488',], col = RColorBrewer::brewer.pal(6, 'PuOr')[2])\n# Add label for the first sample\ntext(1300, 90, mylabels[2], col = RColorBrewer::brewer.pal(6, 'PuOr')[2])\n\n# Reset the layout for the second subplot\npar(mar = c(4, 4, 1, 1))\n# Plot the second sample data\nms.plot(msdata[msdata$sample == 'RXN594',], col = RColorBrewer::brewer.pal(6, 'PuOr')[6])\n# Add label for the second sample\ntext(1300, 90, mylabels[1], col = RColorBrewer::brewer.pal(6, 'PuOr')[6])\n```\n\n::: {.cell-output-display}\n![](supplementary_fig02_files/figure-commonmark/unnamed-chunk-25-1.png)\n:::\n:::\n\n\nLets save the figure as a PDF:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquartz.save(file='./pdf/S02c.pdf', type='pdf')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nquartz_off_screen \n                2 \n```\n\n\n:::\n:::\n\n\n# Bargraph of TFP-ester labeling gels\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngel <- read.table('./data/gels/csv/2023-09-08_GoatAlexa488.csv', header = TRUE, sep = ',')\n\nrefDOL <- 5 #ThermoFisher A21200\n\ngel$norm <- (gel$Mean/gel$Mean[1])*refDOL\n\ngel$norm[5:8] <- (gel$Mean[5:8]/gel$Mean[5])*refDOL\n\n#add a character to the name to get alphabetical ordering of the groups we want in the plot\ngel$sample <- rep( c('A Goat-Alexa488', 'B 1:3', 'C 1:9', 'D 1:15') , 2)\n\navg<-tapply(gel$norm, gel$sample, mean)\n\nquartz(width=3.6, height=6.1)\n\npar(mar=c(6,4,1,0))\nbar <- barplot(avg, ylab='Degree of Labeling (DOL)', las=1, xaxt=\"n\")\nlabs <- c('Goat-Alexa488', '1:3', '1:9', '1:15')\ntext(cex=1, x=c(bar[1]-.55, bar[-1]), y=c(-0.8,rep(-0.4,3)), labs, xpd=TRUE, srt=45)\ntext(mean(bar[-1]), -1.1, 'Goat-PEG4-TCO\\nAZdye488-bis(PEG2-Tz)', xpd=TRUE)\nlines(c(bar[2]-.25, bar[4]+.25), rep(-0.75, 2), xpd = TRUE)\n```\n\n::: {.cell-output-display}\n![](supplementary_fig02_files/figure-commonmark/unnamed-chunk-27-1.png)\n:::\n:::\n\n\nSave as PDF:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquartz.save(file='./pdf/S02f.pdf', type='pdf')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nquartz_off_screen \n                2 \n```\n\n\n:::\n:::\n\n\n# Absorption spectrum\n\nThe output from the spectrophotometer is a CSV file. \nValues are read in as character strings so we have to recast to numeric.\nData starts from column 26 and each row is a sample.\n\n::: {.cell}\n\n```{.r .cell-code}\nspec <- read.table('data/spectra/absorption.csv', sep=',', header=TRUE)\n\nex <- data.frame(sample = character(), wavelength = integer(), absorbance = numeric())\n\nfor(i in 1:nrow(spec)){\n  ex.tmp <- data.frame(sample = spec$Sample.Name[i], wavelength = as.integer( substr(names(spec[,26:ncol(spec)]), 2,4) ), absorbance = as.numeric(spec[i,26:ncol(spec)]) )\n\n  ex <-rbind(ex, ex.tmp)\n}\n\n\n\n# Subset the data frame and remove rows with wavelength under 450\nex <- rbind(subset(ex, sample %in%  unique(ex$sample)[c(1, 2)] & wavelength >= 380 & wavelength < 675) , \n                     subset(ex, sample %in%  unique(ex$sample)[c(3, 4)] & wavelength >= 450 & wavelength < 675) )\n\n\n\nex$absorbance[ex$sample %in% c(unique(ex$sample)[c(1,2)])]<-ex$absorbance[ex$sample %in% c(unique(ex$sample)[c(1,2)])]/max(ex$absorbance[ex$sample %in% c(unique(ex$sample)[c(1,2)])])\n\nex$absorbance[ex$sample %in% c(unique(ex$sample)[c(3,4)])]<-ex$absorbance[ex$sample %in% c(unique(ex$sample)[c(3,4)])]/max(ex$absorbance[ex$sample %in% c(unique(ex$sample)[c(3,4)])])\n\npar(yaxs='i', xaxs='i')\nplot(ex$wavelength, ex$absorbance, type='n', ylab='Absorbance (AU)', xlab = 'Wavelength', las=1, xlim=c(380, 700), ylim=c(0,1), axes=F)\n\ncolor <- c('green3', 'green4', 'red', 'red4')\nunique_samples <- unique(ex$sample)\n# Loop through each unique sample and create a polygon plot\nfor (sample_name in unique_samples) {\n  # Subset the data for the current sample\n  sample_data <- ex[ex$sample == sample_name, ]\n  \n  # Create a polygon plot for the current sample\n  polygon(c(sample_data$wavelength, \n            sample_data$wavelength[nrow(sample_data)], \n            sample_data$wavelength[1],\n            sample_data$wavelength[1]), \n          \n          c(sample_data$absorbance, 0, 0, sample_data$absorbance[1]), \n          col = color[match(sample_name, unique_samples)],\n          border = \"black\")\n  \n  # Add a legend for sample names\n  legend(\"topright\", legend = unique_samples, fill = color)\n}\n```\n\n::: {.cell-output-display}\n![](supplementary_fig02_files/figure-commonmark/unnamed-chunk-29-1.png)\n:::\n:::\n\n\nChange colors and make a figure with correct dimensions to fit in the larger figure layout:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncol2hex <- function(cname)\n  {\n    colMat <- col2rgb(cname)\n    rgb(\n        red=colMat[1,]/255,\n        green=colMat[2,]/255,\n        blue=colMat[3,]/255\n        )\n}\n\nquartz(width= 16, height=4.8)\npar(yaxs='i', xaxs='i')\nplot(ex$wavelength, ex$absorbance, type='n', ylab='Absorbance (AU)', xlab = 'Wavelength (nm)', las=1, xlim=c(380, 700), ylim=c(0,1), axes=F)\n\ncolor <- c('green3', 'green4', 'red', 'red4')\nunique_samples <- unique(ex$sample)\n\npeak.max <- numeric()\n# Loop through each unique sample and create a polygon plot\nfor (sample_name in unique_samples) {\n  # Subset the data for the current sample\n  sample_data <- ex[ex$sample == sample_name, ]\n  \n  # Create a polygon plot for the current sample\n  polygon(c(sample_data$wavelength, \n            sample_data$wavelength[nrow(sample_data)], \n            sample_data$wavelength[1],\n            sample_data$wavelength[1]), \n          \n          c(sample_data$absorbance, 0, 0, sample_data$absorbance[1]), \n          col = paste0( col2hex( color[match(sample_name, unique_samples)] ), '70' ),\n          border = color[match(sample_name, unique_samples)], lwd=2, xpd=TRUE )\n  \n  # Add a legend for sample names\n  legend(\"topright\", legend = unique_samples, fill = color)\n  \n  peak.max <- c(peak.max, sample_data$wavelength[which.max(sample_data$absorbance)] )\n}\naxis(1)\naxis(2, las=1, at=c(0,0.5,1))\n```\n\n::: {.cell-output-display}\n![](supplementary_fig02_files/figure-commonmark/unnamed-chunk-30-1.png)\n:::\n\n```{.r .cell-code}\nquartz.save(file=\"pdf/S02b_excitation.pdf\", type='pdf')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nquartz_off_screen \n                2 \n```\n\n\n:::\n\n```{.r .cell-code}\npeak.max\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 490 496 589 592\n```\n\n\n:::\n:::\n",
    "supporting": [
      "supplementary_fig02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}